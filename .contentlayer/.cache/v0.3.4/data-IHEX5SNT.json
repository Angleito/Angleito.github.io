{
  "cacheItemsMap": {
    "projects/bluefinaiagenttrader.md": {
      "document": {
        "name": "BluefinAI Agent Trader: AI-Powered Cryptocurrency Trading Platform",
        "description": "Sophisticated, containerized crypto trading system using AI (Claude) for chart analysis and automated trading on Bluefin.",
        "tech_stack": [
          "Python",
          "Docker",
          "Microservices",
          "Claude AI",
          "TradingView",
          "Bluefin API",
          "Sui",
          "Headless Chrome/Puppeteer",
          "LangChain"
        ],
        "github": "https://github.com/Angleito/bluefinaitradertemplate",
        "private_full_version": true,
        "contact": "arainey555@gmail.com",
        "features": [
          "AI Chart Analysis (Claude + Screenshot Service)",
          "Microservices Architecture (Dockerized)",
          "Bluefin Exchange API Integration",
          "TradingView Webhook Integration",
          "Automated Position Monitoring & Analysis Triggering",
          "Browser Automation for Chart Interaction",
          "Advanced Risk Management (Sizing, Stops, Concurrent Limits)",
          "Configurable Confidence Thresholds for Trades",
          "Multi-Timeframe Analysis Capability",
          "Centralized Configuration (.env)",
          "Comprehensive Logging & Error Handling"
        ],
        "body": {
          "raw": "\n## Project Overview: BluefinAI Agent Trader\n\nBluefinAI Agent Trader is a sophisticated, containerized cryptocurrency trading system that leverages artificial intelligence for market analysis and automated trading decisions. The platform integrates with the Bluefin exchange API to enable algorithmic trading based on technical analysis, chart patterns, and real-time market signals.\n\nThe system employs state-of-the-art AI technologies, including Claude (by Anthropic) for chart analysis, alongside browser automation tools to capture and process TradingView charts. The entire platform is containerized using Docker, following a microservices architecture that ensures scalability, maintainability, and fault tolerance.\n\n### Technical Architecture\n\nThe project follows a modern microservices architecture with the following key components:\n\n**Core Trading Services:**\n- *Trading Agent Service:* Central decision-making, strategy management, risk assessment. Orchestrates other services.\n- *Bluefin Service:* Handles all Bluefin exchange API interactions (orders, data, positions, account).\n- *Webhook Service:* Receives, validates, and forwards external signals (e.g., TradingView).\n- *Screenshot Service:* Captures TradingView charts via headless browser for AI analysis.\n- *Position Monitoring Service:* Monitors open positions, triggers chart analysis based on timeframe.\n\n**AI and Analysis Services:**\n- *Anthropic Service:* Integrates with Claude AI to analyze chart screenshots and detect patterns, transforming visual data into insights.\n- *Browser Use Service:* Configures and interacts with TradingView charts for correct screenshot capture.\n- *LangChain Service:* NLP capabilities for structuring AI outputs into trading decisions.\n\n### Implementation Details\n\n- **Containerization:** Full Docker implementation (services, networking, resources).\n- **Configuration Management:** Centralized `.env` system.\n- **Error Handling:** Comprehensive recovery mechanisms.\n- **Logging:** Extensive audit trails and debugging logs.\n- **Security:** Hardened container configurations, least privilege principle.\n\n### Technical Stack\n\n- **Backend:** Python 3.11\n- **Containerization:** Docker, Docker Compose\n- **AI/ML:** Anthropic Claude API, OpenAI (optional)\n- **Browser Automation:** Headless Chrome/Puppeteer\n- **Trading API:** Bluefin Exchange (built on SUI blockchain)\n- **Monitoring:** Prometheus, Grafana (optional)\n- **Networking:** Docker overlay networks with security isolation\n\n### Advanced Trading Features\n\n- **AI Chart Analysis:** Computer vision + LLMs for pattern identification.\n- **Risk Management:** Position size limits, max concurrent positions, trailing stops.\n- **Confidence Thresholds:** Executes trades meeting minimum AI confidence scores.\n- **Multi-timeframe Analysis:** Supports 1h, 4h, 1d, etc.\n- **Signal Integration:** Accepts TradingView or custom alerts.\n\n### Project Highlights\n\n- **Production-Ready:** Fully containerized with deployment scripts.\n- **Scalable Architecture:** Designed for horizontal scaling.\n- **Fault Tolerance:** Automatic service restarts, error recovery.\n- **Security-Focused:** API key management, secure communication best practices.\n- **Modular Design:** Independent component upgrades/replacement.\n\n### Development Practices\n\n- Microservices Architecture\n- Configuration as Code (Docker Compose)\n- Continuous Integration (Testing frameworks)\n- Deployment Automation\n\nThis project demonstrates expertise in AI integration, microservices architecture, financial systems programming, and secure API communications.\n\n### Note\n\nThe full implementation is private. Please contact me at arainey555@gmail.com for more details or access. \n\n",
          "html": "<h2>Project Overview: BluefinAI Agent Trader</h2>\n<p>BluefinAI Agent Trader is a sophisticated, containerized cryptocurrency trading system that leverages artificial intelligence for market analysis and automated trading decisions. The platform integrates with the Bluefin exchange API to enable algorithmic trading based on technical analysis, chart patterns, and real-time market signals.</p>\n<p>The system employs state-of-the-art AI technologies, including Claude (by Anthropic) for chart analysis, alongside browser automation tools to capture and process TradingView charts. The entire platform is containerized using Docker, following a microservices architecture that ensures scalability, maintainability, and fault tolerance.</p>\n<h3>Technical Architecture</h3>\n<p>The project follows a modern microservices architecture with the following key components:</p>\n<p><strong>Core Trading Services:</strong></p>\n<ul>\n<li><em>Trading Agent Service:</em> Central decision-making, strategy management, risk assessment. Orchestrates other services.</li>\n<li><em>Bluefin Service:</em> Handles all Bluefin exchange API interactions (orders, data, positions, account).</li>\n<li><em>Webhook Service:</em> Receives, validates, and forwards external signals (e.g., TradingView).</li>\n<li><em>Screenshot Service:</em> Captures TradingView charts via headless browser for AI analysis.</li>\n<li><em>Position Monitoring Service:</em> Monitors open positions, triggers chart analysis based on timeframe.</li>\n</ul>\n<p><strong>AI and Analysis Services:</strong></p>\n<ul>\n<li><em>Anthropic Service:</em> Integrates with Claude AI to analyze chart screenshots and detect patterns, transforming visual data into insights.</li>\n<li><em>Browser Use Service:</em> Configures and interacts with TradingView charts for correct screenshot capture.</li>\n<li><em>LangChain Service:</em> NLP capabilities for structuring AI outputs into trading decisions.</li>\n</ul>\n<h3>Implementation Details</h3>\n<ul>\n<li><strong>Containerization:</strong> Full Docker implementation (services, networking, resources).</li>\n<li><strong>Configuration Management:</strong> Centralized <code>.env</code> system.</li>\n<li><strong>Error Handling:</strong> Comprehensive recovery mechanisms.</li>\n<li><strong>Logging:</strong> Extensive audit trails and debugging logs.</li>\n<li><strong>Security:</strong> Hardened container configurations, least privilege principle.</li>\n</ul>\n<h3>Technical Stack</h3>\n<ul>\n<li><strong>Backend:</strong> Python 3.11</li>\n<li><strong>Containerization:</strong> Docker, Docker Compose</li>\n<li><strong>AI/ML:</strong> Anthropic Claude API, OpenAI (optional)</li>\n<li><strong>Browser Automation:</strong> Headless Chrome/Puppeteer</li>\n<li><strong>Trading API:</strong> Bluefin Exchange (built on SUI blockchain)</li>\n<li><strong>Monitoring:</strong> Prometheus, Grafana (optional)</li>\n<li><strong>Networking:</strong> Docker overlay networks with security isolation</li>\n</ul>\n<h3>Advanced Trading Features</h3>\n<ul>\n<li><strong>AI Chart Analysis:</strong> Computer vision + LLMs for pattern identification.</li>\n<li><strong>Risk Management:</strong> Position size limits, max concurrent positions, trailing stops.</li>\n<li><strong>Confidence Thresholds:</strong> Executes trades meeting minimum AI confidence scores.</li>\n<li><strong>Multi-timeframe Analysis:</strong> Supports 1h, 4h, 1d, etc.</li>\n<li><strong>Signal Integration:</strong> Accepts TradingView or custom alerts.</li>\n</ul>\n<h3>Project Highlights</h3>\n<ul>\n<li><strong>Production-Ready:</strong> Fully containerized with deployment scripts.</li>\n<li><strong>Scalable Architecture:</strong> Designed for horizontal scaling.</li>\n<li><strong>Fault Tolerance:</strong> Automatic service restarts, error recovery.</li>\n<li><strong>Security-Focused:</strong> API key management, secure communication best practices.</li>\n<li><strong>Modular Design:</strong> Independent component upgrades/replacement.</li>\n</ul>\n<h3>Development Practices</h3>\n<ul>\n<li>Microservices Architecture</li>\n<li>Configuration as Code (Docker Compose)</li>\n<li>Continuous Integration (Testing frameworks)</li>\n<li>Deployment Automation</li>\n</ul>\n<p>This project demonstrates expertise in AI integration, microservices architecture, financial systems programming, and secure API communications.</p>\n<h3>Note</h3>\n<p>The full implementation is private. Please contact me at arainey555@gmail.com for more details or access.</p>"
        },
        "_id": "projects/bluefinaiagenttrader.md",
        "_raw": {
          "sourceFilePath": "projects/bluefinaiagenttrader.md",
          "sourceFileName": "bluefinaiagenttrader.md",
          "sourceFileDir": "projects",
          "contentType": "markdown",
          "flattenedPath": "projects/bluefinaiagenttrader"
        },
        "type": "Project",
        "slug": "bluefinaiagenttrader",
        "url": "/projects/bluefinaiagenttrader"
      },
      "documentHash": "1744162409153",
      "hasWarnings": true,
      "documentTypeName": "Project"
    },
    "projects/flashloanbot.md": {
      "document": {
        "name": "Flashloanbot - Automated DeFi Trading on Sui",
        "description": "Automated trading bot for Sui leveraging DEX aggregation and potentially flash loans for DeFi opportunities.",
        "tech_stack": [
          "TypeScript",
          "Sui",
          "Node.js",
          "@mysten/sui.js",
          "@7kprotocol/sdk-ts",
          "DEX Aggregation",
          "DeFi",
          "Automation"
        ],
        "github": "https://github.com/Angleito/SuiFlashBotTemplate",
        "private_full_version": true,
        "contact": "arainey555@gmail.com",
        "features": [
          "Sui Blockchain Interaction (@mysten/sui.js)",
          "DEX Aggregation (7k Protocol)",
          "Optimal Swap Execution Engine",
          "Secure Key Management (env vars, multiple formats)",
          "Resilient Sui Client Connection",
          "Fallback Pricing Mechanism",
          "Arbitrage/Flashloan Orchestration Layer (Conceptual)",
          "Configuration via .env"
        ],
        "body": {
          "raw": "\n## Project Overview: Flashloanbot - Automated DeFi Trading Strategies on Sui\n\nFlashloanbot is an automated trading bot designed to operate on the Sui blockchain. Its primary goal is to identify and execute potentially profitable trading opportunities, such as arbitrage, within the decentralized finance (DeFi) ecosystem on Sui. It leverages sophisticated techniques, potentially including flash loans, and integrates with DEX aggregators to optimize trade execution.\n\n### Core Objective:\n\nThe main objective of Flashloanbot is to autonomously monitor the Sui DeFi landscape, detect price discrepancies or other profitable scenarios across different decentralized exchanges (DEXs), and execute complex multi-step transactions (potentially involving flash loans) to capture this value, all within the atomicity of a single blockchain transaction.\n\n### Key Features & Functionality:\n\n- **Blockchain Interaction (Sui):** Built specifically for Sui, using `@mysten/sui.js` for state queries, transaction building, key management, and submission.\n- **DEX Aggregation (7k Protocol):** Integrates with `@7kprotocol/sdk-ts` to query best swap rates across multiple DEXs (`getQuote`) and build optimal transaction paths (`buildTx`).\n- **Swap Execution Engine (SevenKSwapExecutor):** Manages the swap lifecycle: secure private key loading, quote generation, transaction building, signing, and submission.\n- **Token Address Management:** Handles validation and formatting (`getTokenAddress`, `validateTokenFormat`, `fixTokenFormat`) for Sui token identifiers.\n- **Resilience & Fallbacks:** Uses `createResilientSuiClient` for stable RPC connections and implements `getFallbackQuote` for estimated pricing during 7k API outages.\n- **Potential Flash Loan / Arbitrage Orchestration (Conceptual):** Designed with a potential higher-level `ArbitrageOrchestrator` component to monitor prices, identify arbitrage, calculate flash loan needs, and coordinate multi-step atomic transactions using `SevenKSwapExecutor` or other modules.\n- **Security:** Prioritizes secure private key handling via environment variables and supports multiple secure formats.\n- **Configuration:** Uses `dotenv` for managing critical parameters (keys, RPC endpoints, API URLs).\n\n### Technical Stack:\n\n- **Language:** TypeScript\n- **Blockchain:** Sui\n- **Core Libraries:**\n  - `@mysten/sui.js` (Sui Interaction)\n  - `@7kprotocol/sdk-ts` (DEX Aggregation)\n  - `dotenv` (Configuration)\n  - `node-fetch` (API Calls)\n  - `@scure/bip39`, `ed25519-hd-key` (Key Handling)\n- **Environment:** Node.js\n\n### Relevance for Employers:\n\nDemonstrates hands-on Sui blockchain and DeFi expertise (DEXs, aggregation, arbitrage, flash loans), proficiency in SDK/API integration, design of complex automated strategies, implementation of resilience/error handling, security best practices (key management), and usage of a modern tech stack.\n\n### Note\n\nThe linked GitHub repository contains a simplified demo version. The full implementation with advanced features is private. Please contact me at arainey555@gmail.com for more details or access. \n\n",
          "html": "<h2>Project Overview: Flashloanbot - Automated DeFi Trading Strategies on Sui</h2>\n<p>Flashloanbot is an automated trading bot designed to operate on the Sui blockchain. Its primary goal is to identify and execute potentially profitable trading opportunities, such as arbitrage, within the decentralized finance (DeFi) ecosystem on Sui. It leverages sophisticated techniques, potentially including flash loans, and integrates with DEX aggregators to optimize trade execution.</p>\n<h3>Core Objective:</h3>\n<p>The main objective of Flashloanbot is to autonomously monitor the Sui DeFi landscape, detect price discrepancies or other profitable scenarios across different decentralized exchanges (DEXs), and execute complex multi-step transactions (potentially involving flash loans) to capture this value, all within the atomicity of a single blockchain transaction.</p>\n<h3>Key Features &#x26; Functionality:</h3>\n<ul>\n<li><strong>Blockchain Interaction (Sui):</strong> Built specifically for Sui, using <code>@mysten/sui.js</code> for state queries, transaction building, key management, and submission.</li>\n<li><strong>DEX Aggregation (7k Protocol):</strong> Integrates with <code>@7kprotocol/sdk-ts</code> to query best swap rates across multiple DEXs (<code>getQuote</code>) and build optimal transaction paths (<code>buildTx</code>).</li>\n<li><strong>Swap Execution Engine (SevenKSwapExecutor):</strong> Manages the swap lifecycle: secure private key loading, quote generation, transaction building, signing, and submission.</li>\n<li><strong>Token Address Management:</strong> Handles validation and formatting (<code>getTokenAddress</code>, <code>validateTokenFormat</code>, <code>fixTokenFormat</code>) for Sui token identifiers.</li>\n<li><strong>Resilience &#x26; Fallbacks:</strong> Uses <code>createResilientSuiClient</code> for stable RPC connections and implements <code>getFallbackQuote</code> for estimated pricing during 7k API outages.</li>\n<li><strong>Potential Flash Loan / Arbitrage Orchestration (Conceptual):</strong> Designed with a potential higher-level <code>ArbitrageOrchestrator</code> component to monitor prices, identify arbitrage, calculate flash loan needs, and coordinate multi-step atomic transactions using <code>SevenKSwapExecutor</code> or other modules.</li>\n<li><strong>Security:</strong> Prioritizes secure private key handling via environment variables and supports multiple secure formats.</li>\n<li><strong>Configuration:</strong> Uses <code>dotenv</code> for managing critical parameters (keys, RPC endpoints, API URLs).</li>\n</ul>\n<h3>Technical Stack:</h3>\n<ul>\n<li><strong>Language:</strong> TypeScript</li>\n<li><strong>Blockchain:</strong> Sui</li>\n<li><strong>Core Libraries:</strong>\n<ul>\n<li><code>@mysten/sui.js</code> (Sui Interaction)</li>\n<li><code>@7kprotocol/sdk-ts</code> (DEX Aggregation)</li>\n<li><code>dotenv</code> (Configuration)</li>\n<li><code>node-fetch</code> (API Calls)</li>\n<li><code>@scure/bip39</code>, <code>ed25519-hd-key</code> (Key Handling)</li>\n</ul>\n</li>\n<li><strong>Environment:</strong> Node.js</li>\n</ul>\n<h3>Relevance for Employers:</h3>\n<p>Demonstrates hands-on Sui blockchain and DeFi expertise (DEXs, aggregation, arbitrage, flash loans), proficiency in SDK/API integration, design of complex automated strategies, implementation of resilience/error handling, security best practices (key management), and usage of a modern tech stack.</p>\n<h3>Note</h3>\n<p>The linked GitHub repository contains a simplified demo version. The full implementation with advanced features is private. Please contact me at arainey555@gmail.com for more details or access.</p>"
        },
        "_id": "projects/flashloanbot.md",
        "_raw": {
          "sourceFilePath": "projects/flashloanbot.md",
          "sourceFileName": "flashloanbot.md",
          "sourceFileDir": "projects",
          "contentType": "markdown",
          "flattenedPath": "projects/flashloanbot"
        },
        "type": "Project",
        "slug": "flashloanbot",
        "url": "/projects/flashloanbot"
      },
      "documentHash": "1744162409157",
      "hasWarnings": false,
      "documentTypeName": "Project"
    },
    "projects/qwensuicoder.md": {
      "document": {
        "name": "QwenSuiCoder",
        "description": "End-to-end LLM Benchmarking & Training Framework for Sui blockchain development",
        "tech_stack": [
          "Python",
          "DeepSpeed",
          "Qwen 2.5",
          "MLOps",
          "PyTorch"
        ],
        "github": "https://github.com/Angleito/qwensuicoder",
        "private_full_version": false,
        "contact": "arainey555@gmail.com",
        "features": [
          "Hardware-aware model selection",
          "Automated benchmarking (0.5B to 14B parameters)",
          "Smart parameter selection",
          "DeepSpeed-optimized training with ZeRO optimization",
          "Progressive quantization testing"
        ],
        "body": {
          "raw": "\n## QwenSuiCoder: Automated LLM Benchmarking & Training Framework\n\nThis project is an end-to-end solution for benchmarking, optimizing, and fine-tuning large language models (specifically Qwen 2.5 models) specialized for Sui blockchain development. It's designed to intelligently determine the optimal model size, quantization level, and context length that your hardware can efficiently handle.\n\n### Core Components\n\n1. **Automated Benchmarking** (`benchmark_models.py`):\n   - Tests various model sizes (0.5B to 14B parameters) with different quantization techniques (FP16, 8-bit, 4-bit)\n   - Measures VRAM usage, loading times, and inference capabilities\n   - Identifies the largest model your hardware can run efficiently\n   - Outputs detailed metrics in JSON format for further analysis\n\n2. **Smart Parameter Selection** (`run_benchmarks.sh`):\n   - Orchestrates the benchmarking process\n   - Analyzes results to determine optimal:\n     - Model size (e.g., Qwen 2.5 7B vs 14B)\n     - Quantization level (FP16, 8-bit, 4-bit)\n     - Context length (based on VRAM constraints)\n   - Generates a customized training script with optimized parameters\n\n3. **DeepSpeed-Optimized Training** (`optimized_training.py`):\n   - Implements efficient training using DeepSpeed's ZeRO optimization stages\n   - Supports gradient accumulation, mixed-precision training, and CPU offloading\n   - Configures memory-efficient training based on benchmark results\n   - Saves trained models with standardized naming conventions\n\n### Technical Innovations\n\n1. **Hardware-Aware Model Selection**: Automatically selects the largest model that fits within available VRAM, rather than requiring manual trial and error.\n\n2. **Progressive Quantization Testing**: Tests models with decreasing precision (FP16 → 8-bit → 4-bit) to find the optimal balance between model size and performance.\n\n3. **Robust Error Handling**: Incorporates fallback mechanisms to ensure the pipeline continues even if certain benchmarking steps fail.\n\n4. **Efficient Resource Utilization**: Configures DeepSpeed parameters (ZeRO stages, offloading, etc.) based on hardware constraints for maximum throughput.\n\n### Note\n\nThis project is now publicly available on GitHub. You can view the code repository at [https://github.com/Angleito/qwensuicoder](https://github.com/Angleito/qwensuicoder). For any questions or collaborations, feel free to contact me at arainey555@gmail.com. \n\n",
          "html": "<h2>QwenSuiCoder: Automated LLM Benchmarking &#x26; Training Framework</h2>\n<p>This project is an end-to-end solution for benchmarking, optimizing, and fine-tuning large language models (specifically Qwen 2.5 models) specialized for Sui blockchain development. It's designed to intelligently determine the optimal model size, quantization level, and context length that your hardware can efficiently handle.</p>\n<h3>Core Components</h3>\n<ol>\n<li>\n<p><strong>Automated Benchmarking</strong> (<code>benchmark_models.py</code>):</p>\n<ul>\n<li>Tests various model sizes (0.5B to 14B parameters) with different quantization techniques (FP16, 8-bit, 4-bit)</li>\n<li>Measures VRAM usage, loading times, and inference capabilities</li>\n<li>Identifies the largest model your hardware can run efficiently</li>\n<li>Outputs detailed metrics in JSON format for further analysis</li>\n</ul>\n</li>\n<li>\n<p><strong>Smart Parameter Selection</strong> (<code>run_benchmarks.sh</code>):</p>\n<ul>\n<li>Orchestrates the benchmarking process</li>\n<li>Analyzes results to determine optimal:\n<ul>\n<li>Model size (e.g., Qwen 2.5 7B vs 14B)</li>\n<li>Quantization level (FP16, 8-bit, 4-bit)</li>\n<li>Context length (based on VRAM constraints)</li>\n</ul>\n</li>\n<li>Generates a customized training script with optimized parameters</li>\n</ul>\n</li>\n<li>\n<p><strong>DeepSpeed-Optimized Training</strong> (<code>optimized_training.py</code>):</p>\n<ul>\n<li>Implements efficient training using DeepSpeed's ZeRO optimization stages</li>\n<li>Supports gradient accumulation, mixed-precision training, and CPU offloading</li>\n<li>Configures memory-efficient training based on benchmark results</li>\n<li>Saves trained models with standardized naming conventions</li>\n</ul>\n</li>\n</ol>\n<h3>Technical Innovations</h3>\n<ol>\n<li>\n<p><strong>Hardware-Aware Model Selection</strong>: Automatically selects the largest model that fits within available VRAM, rather than requiring manual trial and error.</p>\n</li>\n<li>\n<p><strong>Progressive Quantization Testing</strong>: Tests models with decreasing precision (FP16 → 8-bit → 4-bit) to find the optimal balance between model size and performance.</p>\n</li>\n<li>\n<p><strong>Robust Error Handling</strong>: Incorporates fallback mechanisms to ensure the pipeline continues even if certain benchmarking steps fail.</p>\n</li>\n<li>\n<p><strong>Efficient Resource Utilization</strong>: Configures DeepSpeed parameters (ZeRO stages, offloading, etc.) based on hardware constraints for maximum throughput.</p>\n</li>\n</ol>\n<h3>Note</h3>\n<p>This project is now publicly available on GitHub. You can view the code repository at <a href=\"https://github.com/Angleito/qwensuicoder\">https://github.com/Angleito/qwensuicoder</a>. For any questions or collaborations, feel free to contact me at arainey555@gmail.com.</p>"
        },
        "_id": "projects/qwensuicoder.md",
        "_raw": {
          "sourceFilePath": "projects/qwensuicoder.md",
          "sourceFileName": "qwensuicoder.md",
          "sourceFileDir": "projects",
          "contentType": "markdown",
          "flattenedPath": "projects/qwensuicoder"
        },
        "type": "Project",
        "slug": "qwensuicoder",
        "url": "/projects/qwensuicoder"
      },
      "documentHash": "1744162409158",
      "hasWarnings": false,
      "documentTypeName": "Project"
    }
  }
}
