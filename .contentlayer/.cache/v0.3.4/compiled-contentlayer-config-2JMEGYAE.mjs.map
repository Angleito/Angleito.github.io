{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from 'contentlayer/source-files'\n\nexport const Post = defineDocumentType(() => ({\n  name: 'Post',\n  filePathPattern: `posts/**/*.md`,\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    author: { type: 'string', required: true },\n    layout: { type: 'string' },\n    categories: { type: 'list', of: { type: 'string' }, required: true },\n    tags: { type: 'list', of: { type: 'string' } },\n    excerpt: { type: 'string' }\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (post) => post._raw.sourceFileName.replace(/\\.md$/, '')\n    },\n    url: {\n      type: 'string',\n      resolve: (post) => `/posts/${post._raw.sourceFileName.replace(/\\.md$/, '')}`\n    }\n  },\n}))\n\nexport const Project = defineDocumentType(() => ({\n  name: 'Project',\n  filePathPattern: `projects/**/*.md`,\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    description: { type: 'string', required: true },\n    tech_stack: { type: 'list', of: { type: 'string' }, required: true },\n    github: { type: 'string' },\n    private_full_version: { type: 'boolean' },\n    has_demo: { type: 'boolean' },\n    contact: { type: 'string' },\n    features: { type: 'list', of: { type: 'string' }, required: true }\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (project) => project._raw.sourceFileName.replace(/\\.md$/, '')\n    },\n    url: {\n      type: 'string',\n      resolve: (project) => `/projects/${project._raw.sourceFileName.replace(/\\.md$/, '')}`\n    }\n  },\n}))\n\nexport default makeSource({\n  contentDirPath: 'content',\n  documentTypes: [Post, Project],\n  disableImportAliasWarning: true,\n})"],
  "mappings": ";AAAA,SAAS,oBAAoB,kBAAkB;AAExC,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACxC,MAAM,EAAE,MAAM,QAAQ,UAAU,KAAK;AAAA,IACrC,QAAQ,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACzC,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IACnE,MAAM,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,EAAE;AAAA,IAC7C,SAAS,EAAE,MAAM,SAAS;AAAA,EAC5B;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,KAAK,KAAK,eAAe,QAAQ,SAAS,EAAE;AAAA,IACjE;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,UAAU,KAAK,KAAK,eAAe,QAAQ,SAAS,EAAE,CAAC;AAAA,IAC5E;AAAA,EACF;AACF,EAAE;AAEK,IAAM,UAAU,mBAAmB,OAAO;AAAA,EAC/C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,MAAM,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IACvC,aAAa,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC9C,YAAY,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,IACnE,QAAQ,EAAE,MAAM,SAAS;AAAA,IACzB,sBAAsB,EAAE,MAAM,UAAU;AAAA,IACxC,UAAU,EAAE,MAAM,UAAU;AAAA,IAC5B,SAAS,EAAE,MAAM,SAAS;AAAA,IAC1B,UAAU,EAAE,MAAM,QAAQ,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,KAAK;AAAA,EACnE;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,QAAQ,KAAK,eAAe,QAAQ,SAAS,EAAE;AAAA,IACvE;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,YAAY,aAAa,QAAQ,KAAK,eAAe,QAAQ,SAAS,EAAE,CAAC;AAAA,IACrF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,MAAM,OAAO;AAAA,EAC7B,2BAA2B;AAC7B,CAAC;",
  "names": []
}
